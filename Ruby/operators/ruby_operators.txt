----------------------------------------------------------Ruby - Operators--------------------------------------------------------------

 1). Arithmetic Operators :- +,-,/,%,*,**(power).
 
 2). Comparison Operators :- ==,!=,>,<,<=,>=,

	a). Combined comparison operator(<=>)
		-> Returns 0 if first operand equals second                 5<=>5    return 0
		-> 1 if first operand is greater than the second            5<=>2    return 1
		-> -1 if first operand is less than the second.             2<=>5    return -1
	
	b). ===  -> Used to test equality within a when clause of a case statement.	
			
		eg:- (1...10) === 5 returns true.

       c). (.eql?) -> True if the receiver and argument have both the same type and equal values.	
       
       	eg:- 1 == 1.0 returns true, but 1.eql?(1.0) is false.

       d). equal?  -> True if the receiver and argument have the same object id.	
       
       	eg:- if aObj is duplicate of bObj then aObj == bObj is true
       	     a.equal?bObj is false but a.equal?aObj is true.
		
 3). Assignment Operators :- =,+=,-=,*=,/=,%=,**=
 
 4). Parallel Assignment :-
 
 	eg :- 1. a, b, c = 10, 20, 30
 	      2. for swap -> a, b = b, c
 	      
 5). Bitwise Operators :- &,|,^,~,<<,>>
 
 6). Logical Operators :- and,or,&&,||,!,not
 
 7). Ternary Operator :- (?:)
 
 	syntax :-If Condition is true ? Then value X : Otherwise value Y
 	
 8). defined? Operators :-
  
 -> defined? is a special operator that takes the form of a method call to determine whether or not the passed expression is defined.
 
 	eg :- defined? variable      # True if variable is initialized
 	   :- defined? method_call   # True if a method is defined
 	   :- defined? super         # True if a method exists that can be called with super user
 	   :- defined? yield         # True if a code block has been passed

 9). Double Colon "::" Operators :-
 
  -> The :: is a unary operator that allows: constants, instance methods and class methods defined within a class or module, to be  	accessed from anywhere outside the class or module.
  
  -> You need to just prefix the :: Const_name with an expression that returns the appropriate class or module object.
  
  NOTE :- Remember in Ruby, classes and methods may be considered constants too.
  

