---------------------------------------------------------------Hash irb-------------------------------------------------------------------

 1). Methods for Creating a Hash:-
 
	a). ::[]-> Returns a new hash populated with given objects.
		
		eg:-
		3.2.1 :005 > my_hash = Hash["a",1,"b",2]
		 => {"a"=>1, "b"=>2} 

	b). ::new-> Returns a new empty hash.
	
		eg:-
		3.2.1 :006 > my_hash = Hash.new
		 => {} 
		3.2.1 :007 > my_hash["a"] = 22
		 => 22 
		3.2.1 :008 > my_hash["b"] = 33
		 => 33 
		3.2.1 :009 > my_hash
		 => {"a"=>22, "b"=>33} 

	c). ::try_convert-> Returns a new hash created from a given object.
	
		eg:-
		3.2.1 :010 > my_hash = Hash.try_convert({"y" => 99 , "z" => 100})
		 => {"y"=>99, "z"=>100} 
		3.2.1 :012 > my_hash2 = Hash.try_convert("not a hash")
		 => nil
		 
 2). Methods for Setting Hash State:-
 
	a). compare_by_identity: Sets self to consider only identity in comparing keys.
	
		eg:-
		3.2.1 :013 > my_hash
		 => {"y"=>99, "z"=>100} 
		3.2.1 :014 > my_hash.compare_by_identity
		 => {"y"=>99, "z"=>100} 
		3.2.1 :015 > my_hash["y".dup]
		 => nil 
		3.2.1 :016 > my_hash["y"]           #object id changed for y, so it will return nil if we access y in my_hash. 
		 => nil 

	b). default=: Sets the default to a given value.
	
		eg:-
		3.2.1 :023 > my_hash = Hash.new
		 => {} 
		3.2.1 :024 > my_hash.default =0 
		 => 0 
		3.2.1 :025 > my_hash["a"]
		 => 0 

	c). default_proc=: Sets the default proc to a given proc.
	
		eg:-
		3.2.1 :026 > my_hash
		 => {} 
		3.2.1 :027 > my_hash.default_proc = proc {|hash,key| hash[key] = key.length}     #setting key length as value for the key 
		 => #<Proc:0x00007f1aa4c89900 (irb):27> 
		3.2.1 :028 > my_hash["hello"]
		 => 5 
		
	d). rehash: Rebuilds the hash table by recomputing the hash index for each key
	
		eg:-
		3.2.1 :029 > my_hash3 = {"a" => 1, "b" => 2}
		 => {"a"=>1, "b"=>2} 
		3.2.1 :030 > my_hash3.rehash      		#making hash rehashable to change the values.
		 => {"a"=>1, "b"=>2} 
		3.2.1 :031 > my_hash3["a".dup] = 3
		 => 3 
		3.2.1 :032 > my_hash3["a"]
		 => 3 
		 
 3). Methods for Querying :-
 
	a). any?: Returns whether any element satisfies a given criterion.
	
		eg:-		
		3.2.1 :035 > my_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :036 > has_even_number = my_hash.any? {|k,v| v.even?}
		 => true 
		3.2.1 :037 > puts "has even value ? #{has_even_number}"
		has even value ? true
		 => nil      
		
	b). compare_by_identity?: Returns whether the hash considers only identity when comparing keys.
	
		eg:-                                                     
		3.2.1 :038 > my_hash.compare_by_identity
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :039 > puts "using identity comparison? #{my_hash.compare_by_identity?}"
		using identity comparison? true
		 => nil                                                                       

	c). empty?: Returns whether there are no entries.
	
		eg:-
		3.2.1 :040 > puts "is hash empty? #{my_hash.empty?}"
		is hash empty? false
		 => nil  

	d). eql?: Returns whether a given object is equal to self.
	
		eg:-
		3.2.1 :044 > puts "hashes equal? #{my_hash.eql?(other_hash)}"
		hashes equal? false
		 => nil                                                           
		
	e). hash: Returns the integer hash code.
	
		eg:-
		3.2.1 :045 > puts "Hash code : #{my_hash.hash}"
		Hash code : 364115739327489413
		 => nil                                                           

	f). has_value?: Returns whether a given object is a value in self.
	
		eg:-
		3.2.1 :046 > hash_value = my_hash.has_value?(2)
		 => false 
		3.2.1 :047 > hash_value = my_hash.has_value?(10)
		 => true 

	g). include?, has_key?, member?, key?: Returns whether a given object is a key in self.
	
		eg:-
		3.2.1 :054 > other_hash.has_key?("a")
		 => true 

	h). length, size: Returns the count of entries.
	
		eg:-
		3.2.1 :056 > my_hash.length
		 => 3 

	i). value?: Returns whether a given object is a value in self.
	
		eg:-
		3.2.1 :057 > my_hash.value?(1)
		 => true 
		 
 4). Methods for Comparing:-
 
	a). <: Returns whether self is a proper subset of a given object.
	
		eg:-
		3.2.1 :061 > my_hash
		 => {"hello"=>5, "a"=>1, "b"=>10, "c"=>50} 
		3.2.1 :062 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :063 > my_hash.<(other_hash)
		 => false 
		3.2.1 :064 > other_hash.<(my_hash)
		 => true 
		
	b). <=: Returns whether self is a subset of a given object.
	
		eg:-
		3.2.1 :065 > other_hash.<=(my_hash)
		 => true 

	c). ==: Returns whether a given object is equal to self.
	
		eg:-
		3.2.1 :066 > other_hash.==(my_hash)
		 => false 
		
	d). >: Returns whether self is a proper superset of a given object
		
		eg:-
		3.2.1 :067 > other_hash.>(my_hash)
		 => false 
		
	e). >=: Returns whether self is a proper superset of a given object.
	
		eg:-
		3.2.1 :068 > other_hash.>=(my_hash)
		 => false 
		 
 5). Methods for Fetching:-
 
	a). []: Returns the value associated with a given key.
	
		eg:-
		3.2.1 :080 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :081 > other_hash["b"]
		 => 10 
		
	b). assoc: Returns a 2-element array containing a given key and its value.
	
		eg:-
		3.2.1 :082 > other_hash.assoc("b")
		 => ["b", 10] 
		
	c). dig: Returns the object in nested objects that is specified by a given key and additional arguments.
	
		eg:-
		3.2.1 :083 > hash = {a: {b: {c: 100}}}
		 => {:a=>{:b=>{:c=>100}}} 
		3.2.1 :084 >  hash.dig(:a, :b, :c)
		 => 100 

	d). fetch: Returns the value for a given key.
	
		eg:-
		3.2.1 :085 > other_hash.fetch("hello")
		 => 5 
		3.2.1 :086 > other_hash.fetch("d")
		(irb):86:in `fetch': key not found: "d" (KeyError)  
		                            
		3.2.1 :087 > other_hash.fetch("d",0)       #if key not present the use default(0) value , error will not shown
		 => 0 

	e). fetch_values: Returns array containing the values associated with given keys.
	
		eg:-
		3.2.1 :093 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10} 
		3.2.1 :094 > other_hash.fetch_values("a", "b")
		 => [1, 10] 
		3.2.1 :095 > other_hash.fetch_values("a", "d")
		(irb):95:in `fetch_values': key not found: "d" (KeyError)

	f). key: Returns the key for the first-found entry with a given value.
	
		eg:-
		3.2.1 :096 > other_hash.key(5)
		 => "hello" 

	g). keys: Returns an array containing all keys in self.
	
		eg:-
		3.2.1 :097 > other_hash.keys
		 => ["hello", "a", "b"] 

	h). rassoc: Returns a 2-element array consisting of the key and value of the first-found entry having a given value.
	
		eg:-
		3.2.1 :098 > other_hash["d"] = 1
		 => 1 
		3.2.1 :099 > other_hash
		 => {"hello"=>5, "a"=>1, "b"=>10, "d"=>1} 
		3.2.1 :100 > other_hash.rassoc(1)
		 => ["a", 1] 

	i). values: Returns an array containing all values in self
	
		eg:-
		3.2.1 :101 > other_hash.values
		 => [5, 1, 10, 1] 

	j). values_at: Returns an array containing values for given keys.
	
		eg:-
		3.2.1 :102 > other_hash.values_at("hello", "d")
		 => [5, 1] 

 6). Methods for Assigning :-
 
	a). []=, store: Associates a given key with a given value.
	
		eg:-
		3.2.1 :103 > h = {foo: 0,bar: 1}
		 => {:foo=>0, :bar=>1} 
		3.2.1 :104 > h[:foo] = 2
		 => 2 
		3.2.1 :105 > h.store(:bar,3)           #another way to update the values using the key
		 => 3 
		3.2.1 :106 > h
		 => {:foo=>2, :bar=>3} 
		3.2.1 :107 > h[:baz] = 2               #if key is not present in the hash then make new entry at the end of the hash.
		 => 2 
		3.2.1 :108 > h
		 => {:foo=>2, :bar=>3, :baz=>2} 

	b). merge: Returns the hash formed by merging each given hash into a copy of self.
	-> If the hashes being merged contain the same keys, 
	-> the values in the last hash passed as an argument will overwrite the values in the previous hashes.
	
		eg:-
		3.2.1 :109 > h1 = {a: 1,b: 2}
		 => {:a=>1, :b=>2} 
		3.2.1 :110 > h2 = {c: 3,d: 4}
		 => {:c=>3, :d=>4} 
		3.2.1 :111 > h1.merge(h2)
		 => {:a=>1, :b=>2, :c=>3, :d=>4} 

	c). merge!, update: Merges each given hash into self.
	-> If the hashes being merged contain the same keys, 
	-> the values in the last hash passed as an argument will overwrite the values in the previous hashes.
	
		eg:-
		3.2.1 :112 > h3 = {b: 5, e: 6}
		 => {:b=>5, :e=>6} 
		3.2.1 :113 > h1
		 => {:a=>1, :b=>2} 
		3.2.1 :114 > h1.merge!(h2)
		 => {:a=>1, :b=>2, :c=>3, :d=>4} 
		3.2.1 :115 > h1
		 => {:a=>1, :b=>2, :c=>3, :d=>4} 
		3.2.1 :116 > h1.merge!(h3)
		 => {:a=>1, :b=>5, :c=>3, :d=>4, :e=>6} 

	d). replace: Replaces the entire contents of self with the contents of a given hash.
	
		eg:-
		3.2.1 :117 > h1
		 => {:a=>1, :b=>5, :c=>3, :d=>4, :e=>6} 
		3.2.1 :118 > h2
		 => {:c=>3, :d=>4} 
		3.2.1 :119 > h1.replace(h2)
		 => {:c=>3, :d=>4} 
		3.2.1 :120 > h1
		 => {:c=>3, :d=>4} 

		
 7). Methods for Deleting:-
 
-> These methods remove entries from self:

	a). clear: Removes all entries from self.
	
		eg:-
		3.2.1 :125 > h
		 => {:foo=>2, :bar=>3, :baz=>2} 
		3.2.1 :126 > h.clear
		 => {} 
		3.2.1 :127 > h
		 => {} 
		
	b). compact!: Removes all nil-valued entries from self.
	
		eg:-
		3.2.1 :128 > h = {:foo=>2, :bar=>3, :baz=>2}
		 => {:foo=>2, :bar=>3, :baz=>2} 
		3.2.1 :129 > h["bar"] = nil
		 => nil 
		3.2.1 :130 > h
		 => {:foo=>2, :bar=>3, :baz=>2, "bar"=>nil} 
		3.2.1 :131 > h.compact!
		 => {:foo=>2, :bar=>3, :baz=>2} 
		
	c). delete: Removes the entry for a given key.
	
		eg:-
		3.2.1 :132 > h.delete(:foo)
		 => 2 
		3.2.1 :133 > h
		 => {:bar=>3, :baz=>2} 

	d). delete_if: Removes entries selected by a given block.
	
		eg:-
		3.2.1 :138 > h = {a: 1, b: 2, c: 3}
		3.2.1 :139 > h.delete_if { |key, value| value > 2 }
		 => {:a=>1, :b=>2} 
		
	e). filter!, select!: Keep only those entries selected by a given block.
	
		eg:-
		3.2.1 :140 > h = {a: 1, b: 2, c: 3}
		3.2.1 :141 > h.select! { |key, value| value > 1 }
		 => {:b=>2, :c=>3} 
		3.2.1 :142 > h = {a: 1, b: 2, c: 3}
		3.2.1 :143 > h.filter! { |key, value| key == :a || key == :c }
		 => {:a=>1, :c=>3} 

	f). keep_if: Keep only those entries selected by a given block.
	
		eg:-
		3.2.1 :145 > h = {a: 1,b: 2,c: 3}
		 => {:a=>1, :b=>2, :c=>3} 
		3.2.1 :146 > h.keep_if{|key , value| value > 1}
		 => {:b=>2, :c=>3} 
		3.2.1 :147 > h
		 => {:b=>2, :c=>3} 

	g). reject!: Removes entries selected by a given block.
	
		eg:-
		3.2.1 :148 > h = {a: 1,b: 2,c: 3}
		 => {:a=>1, :b=>2, :c=>3} 
		3.2.1 :149 > h.reject!{|key,value| value > 2}
		 => {:a=>1, :b=>2} 

	h). shift: Removes and returns the first entry.
	
		eg:-
		3.2.1 :150 > h = {a: 1,b: 2,c: 3}
		 => {:a=>1, :b=>2, :c=>3} 
		3.2.1 :151 > h.shift
		 => [:a, 1] 
		3.2.1 :152 > h
		 => {:b=>2, :c=>3} 

-> These methods return a copy of self with some entries removed:

	i). compact: Returns a copy of self with all nil-valued entries removed.
	
		eg:-
		3.2.1 :153 > h = {a: 1, b: nil, c: 3, d: nil}
		 => {:a=>1, :b=>nil, :c=>3, :d=>nil} 
		3.2.1 :154 > h.compact
		 => {:a=>1, :c=>3} 

	j). except: Returns a copy of self with entries removed for specified keys.
	
		eg:-
		3.2.1 :155 > h
		 => {:a=>1, :b=>nil, :c=>3, :d=>nil} 
		3.2.1 :156 > h.except(:a , :d)
		 => {:b=>nil, :c=>3} 
		3.2.1 :157 > h

	k). filter, select: Returns a copy of self with only those entries selected by a given block.
	
		eg:-
		3.2.1 :161 > h = {a: 1,b: 2,c: 3,d: 4}
		 => {:a=>1, :b=>2, :c=>3, :d=>4} 
		3.2.1 :162 > h.select {|key,value| value >2}
		 => {:c=>3, :d=>4} 

	l). reject: Returns a copy of self with entries removed as specified by a given block.
	
		eg:-
		3.2.1 :163 > h
		 => {:a=>1, :b=>2, :c=>3, :d=>4} 
		3.2.1 :164 > h.reject {|key,value| key == :b || value == 4}
		 => {:a=>1, :c=>3} 
		
	m). slice: Returns a hash containing the entries for given keys.
	
		eg:-
		3.2.1 :165 > h
		 => {:a=>1, :b=>2, :c=>3, :d=>4} 
		3.2.1 :166 > h.slice(:a,:c)
		 => {:a=>1, :c=>3} 
		 
 8). Methods for Iterating:-
 
	a). each, each_pair: Calls a given block with each key-value pair.
	
		eg:-
		3.2.1 :001 > h = {a: 1,b: 2,c: 3}
		 => {:a=>1, :b=>2, :c=>3} 
		3.2.1 :002 > h.each{|key,value| puts "#{key} => #{value}"}        #each
		a => 1
		b => 2                                                          
		c => 3       
		
	    ->	3.2.1 :004 > h.each_pair { |pair| puts "#{pair[0]} => #{pair[1]}"}      #each_pair
		a => 1
		b => 2                                                                
		c => 3                                                       

	b). each_key: Calls a given block with each key.
	
		eg:-
		3.2.1 :006 > h.each_key{|key| puts key}
		a
		b                                                             
		c                                                                                              
		
	c). each_value: Calls a given block with each value.
	
		eg:-
		3.2.1 :007 > h.each_value{|value| puts value}
		1
		2                                                             
		3                          

 9). Methods for Converting:-
 
	a). inspect, to_s: Returns a new String containing the hash entries.
	
		eg:-
		3.2.1 :008 > h
		 => {:a=>1, :b=>2, :c=>3} 
		3.2.1 :009 > h.inspect
		 => "{:a=>1, :b=>2, :c=>3}" 
		3.2.1 :010 > h.to_s
		 => "{:a=>1, :b=>2, :c=>3}" 
		
	b). to_a: Returns a new array of 2-element arrays; each nested array contains a key-value pair from self.
	
		eg:-
		3.2.1 :011 > h.to_a
		 => [[:a, 1], [:b, 2], [:c, 3]] 

	c). to_h: Returns self if a Hash; if a subclass of Hash, returns a Hash containing the entries from self.
	
		eg:-
		3.2.1 :012 > h.to_h
		 => {:a=>1, :b=>2, :c=>3} 

	d). to_hash: Returns self.
	
		eg:-
		3.2.1 :013 > h.to_hash
		 => {:a=>1, :b=>2, :c=>3} 

	e). to_proc: Returns a proc that maps a given key to its value.
	
		eg:-
		3.2.1 :014 > p = h.to_proc
		 => #<Proc:0x00007f4b2b0f2170 (lambda)> 
		3.2.1 :015 > p.call(:a)
		 => 1 
		 
 10). Methods for Transforming Keys and Values:-
 
	a). transform_keys: Returns a copy of self with modified keys.
	
		eg:-
		3.2.1 :016 > h
		 => {:a=>1, :b=>2, :c=>3} 
		3.2.1 :017 > h.transform_keys{|key| key.to_s}
		 => {"a"=>1, "b"=>2, "c"=>3} 

	b). transform_keys!: Modifies keys in self
	
		eg:-
		3.2.1 :018 > h.transform_keys!{|key| key.to_s}
		 => {"a"=>1, "b"=>2, "c"=>3} 

	c). transform_values: Returns a copy of self with modified values.
	
		eg:-
		3.2.1 :019 > h
		 => {"a"=>1, "b"=>2, "c"=>3} 
		3.2.1 :020 > h.transform_values{|value| value*2}
		 => {"a"=>2, "b"=>4, "c"=>6} 

	d). transform_values!: Modifies values in self.
	
		eg:-
		3.2.1 :021 > h
		 => {"a"=>1, "b"=>2, "c"=>3} 
		3.2.1 :022 > h.transform_values!{|value| value*2}
		 => {"a"=>2, "b"=>4, "c"=>6} 

 11). Other Methods :-
 
	a). flatten: Returns an array that is a 1-dimensional flattening of self.
	
		eg:-
		3.2.1 :023 > h = {a: 1,b: {c: 2,d: 3}, e: 4}
		 => {:a=>1, :b=>{:c=>2, :d=>3}, :e=>4} 
		3.2.1 :024 > h.flatten
		 => [:a, 1, :b, {:c=>2, :d=>3}, :e, 4] 
		
	b). invert: Returns a hash with the each key-value pair inverted.
	
		eg:-
		3.2.1 :025 > h.invert
		 => {1=>:a, {:c=>2, :d=>3}=>:b, 4=>:e} 




