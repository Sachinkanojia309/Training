------------------------------------------------------------ Ruby - Exceptions ----------------------------------------------------------

 -> The execution and the exception always go together. 
 -> If you are opening a file, which does not exist, then if you did not handle this situation properly, then your program is considered to be of bad quality.

 -> The program stops if an exception occurs. 
 -> So exceptions are used to handle various type of errors, which may occur during a program execution and take appropriate action instead of halting program completely.

 -> In ruby ,We enclose the code that could raise an exception in a begin/end block and use rescue clauses to tell Ruby the types of exceptions we want to handle.

	Syntax:-
		begin  
		# -  
		rescue OneTypeOfException  
		# -  
		rescue AnotherTypeOfException  
		# -  
		else  
		# Other exceptions
		ensure
		# Always will be executed
		end
		
	eg:-
		begin
		  file = open("/unexistant_file")
		  if file
		    puts "File opened successfully"
		  end
		  rescue
		    puts "file not found"
		end
		print file
		
	1). Using retry Statement :-
	-> You can capture an exception using rescue block and then use retry statement to execute begin block from the beginning.

		Syntax :-
			begin
			   # Exceptions raised by this code will 
			   # be caught by the following rescue clause
			rescue
			   # This block will capture all types of exceptions
			   retry  # This will move control to the beginning of begin
			end
			
		eg:-
			begin
			  file = open("somefile")
			  if file
			    puts "file opened successfully"
			  end
			  rescue
			    puts "retry use"
			    retry
			end

			print file
			
	2). Using raise Statement :-
	
	-> You can use raise statement to raise an exception. 
	-> The following method raises an exception whenever it's called. It's second message will be printed.

		Syntax :-
		raise 

		OR

		raise "Error Message" 

		OR

		raise ExceptionType, "Error Message"

		OR

		raise ExceptionType, "Error Message" condition
		
	-> The first form simply re-raises the current exception (or a RuntimeError if there is no current exception). 
	   This is used in exception handlers that need to intercept an exception before passing it on.

	-> The second form creates a new RuntimeError exception, setting its message to the given string. 
	   This exception is then raised up the call stack.

	-> The third form uses the first argument to create an exception and then sets the associated message to the second argument.

	-> The fourth form is similar to the third form but you can add any conditional statement like unless to raise an exception.
	
	
		eg1:-
			begin  
			   puts 'I am before the raise.'  
			   raise 'An error has occurred.'  
			   puts 'I am after the raise.'  
			rescue  
			   puts 'I am rescued.'  
			end  
			puts 'I am after the begin block.'
		
		eg2:-
			begin  
			   raise 'A test exception.'  
			rescue Exception => e  
			   puts e.message  
			   puts e.backtrace.inspect  
			end  
	
			
	3). Using ensure Statement :-
	
	 -> Sometimes, you need to guarantee that some processing is done at the end of a block of code, 
	 -> regardless of whether an exception was raised.
	 -> The ensure clause does just this. 
	 -> ensure goes after the last rescue clause and contains a chunk of code that will always be executed as the block terminates. 
	 -> It doesn't matter if the block exits normally, if it raises and rescues an exception, 
	 -> or if it is terminated by an uncaught exception, the ensure block will get run.

		Syntax:-
			begin 
			   #.. process 
			   #..raise exception
			rescue 
			   #.. handle error 
			ensure 
			   #.. finally ensure execution
			   #.. This will always execute.
			end

		eg:-
			begin
			   raise 'A test exception.'
			rescue Exception => e
			   puts e.message
			   puts e.backtrace.inspect
			ensure				#at last it will execute .
			   puts "Ensuring execution"
			end
			
	4). Using else Statement :-
	
		-> If the else clause is present, it goes after the rescue clauses and before any ensure.
		-> The body of an else clause is executed only if no exceptions are raised by the main body of code.

		Syntax :-
			begin 
			   #.. process 
			   #..raise exception
			rescue 
			   # .. handle error
			else
			   #.. executes if there is no exception
			ensure 
			   #.. finally ensure execution
			   #.. This will always execute.
			end
		
		eg :-
			begin
			   # raise 'A test exception.'
			   puts "I'm not raising exception"
			rescue Exception => e
			   puts e.message
			   puts e.backtrace.inspect
			else
			   puts "Congratulations-- no errors!"
			ensure
			   puts "Ensuring execution"
			end
			
	5). Catch and Throw :-
	
		-> While the exception mechanism of raise and rescue is great for abandoning the execution when things go wrong, 
		-> it's sometimes nice to be able to jump out of some deeply nested construct during normal processing. 
		-> This is where catch and throw come in handy.
		-> The catch defines a block that is labeled with the given name (which may be a Symbol or a String). 
		-> The block is executed normally until a throw is encountered.

		Syntax:-
			throw :lablename
			#.. this will not be executed
			catch :lablename do
			#.. matching catch will be executed after a throw is encountered.
			end

			OR

			throw :lablename condition
			#.. this will not be executed
			catch :lablename do
			#.. matching catch will be executed after a throw is encountered.
			end
			
		eg:-
			exception = catch(:divide) do
			  number = rand(2)                  #random number 0 and 1
			  throw :divide, 10 if number == 0  #if 0 then print 10
			  number 
			end

			puts exception
