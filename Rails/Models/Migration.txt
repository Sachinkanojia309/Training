------------------------------------------------------------- Migration ----------------------------------------------------------------

 1). Creating a Migration:-
 
 	a). Creating a Standalone Migration
 	-> Migrations are stored as files in the db/migrate directory.
 	-> The name of the file is of the form YYYYMMDDHHMMSS_create_products.rb
 	
 	-> generate migration:-
 		:- generate migration AddPartNumberToProducts
 		
 	-> Add and remove column:-
 		:- rails generate migration AddPartNumberToProducts part_number:string --force
 
 	-> Add index :-
 		:- rails generate migration AddPartNumberToProducts part_number:string:index
 		
 	-> A migration to remove a column from the command line:
		:- rails generate migration RemovePartNumberFromProducts part_number:string

	-> migration to add details in products
		:- rails g migration AddDetailsToProducts price:decimal
		
	-> create new model user for reference migration work:
		:- rails g model user name:string gender:string
		
	-> Add user reference to product:
		:- rails generate migration AddUserRefToProducts user:references
		
	-> Apply join on user and product model:
		:- rails generate migration CreateJoinTableCustomerProduct user product
		
 2). Writing a Migration:-
 
 	a). Creating a Table

		class CreateUsers < ActiveRecord::Migration[6.1]
		  def change
		    create_table :users do |t|
		      t.string :name, null: false 		 # the name column cannot be null
		      t.string :email, index: { unique: true } # add an index to the email column with unique constraint
		      t.integer :age, default: 18 		 # the age column has a default value of 18
		      t.boolean :active, default: true 	 # the active column has a default value of true
		      t.text :description, limit: 1000 	 # the description column has a maximum length of 1000 characters
		      t.references :account, foreign_key: true, null: false # add a foreign key to the account table and make it required
		      t.timestamps 				 # add timestamps for created_at and updated_at columns
		    end
		  end
		end
		
	b). Creating a Join Table
	
	-> The migration method create_join_table creates an HABTM (has and belongs to many) join table.
		:- create_join_table :products, :categories

	-> which creates a categories_products table with two columns called category_id and product_id. 
	   These columns have the option :null set to false by default. This can be overridden by specifying the :column_options option:

		:- create_join_table :products, :categories, column_options: { null: true }

	-> By default, the name of the join table comes from the union of the first two arguments provided to create_join_table, 
	   in alphabetical order. To customize the name of the table, provide a :table_name option:

		:- create_join_table :products, :categories, table_name: :categorization
		
	-> create_join_table also accepts a block, which you can use to add indices (which are not created by default) 

		:- create_join_table :products, :categories do |t|
		     t.index :product_id
		     t.index :category_id
		   end
		   
	c). Changing Tables
	
	-> A close cousin of create_table is change_table, used for changing existing tables. 
	   It is used in a similar fashion to create_table but the object yielded to the block knows more tricks.
	   
	   	:-     class UseChangeTable < ActiveRecord::Migration[7.0]
			  def change
			    change_table :products do |t|
			      t.remove :description, :name
			      t.string :p_name
			      t.string :part_number
			      t.index :part_number
			    end
			  end
			end
			
	d). Changing Columns
	
	NOTE :- Note that change_column command is irreversible.
	
	-> Like the remove_column and add_column Rails provides the change_column migration method.
	-> Besides change_column, the change_column_null and change_column_default methods are used specifically to change a not null constraint and default values of a column.
	
	eg for default :- change_column_default :products, :approved, from: true, to: false    #(reversible)
	
		:-      class ChangingColumnInUsers < ActiveRecord::Migration[7.0]
			  def change
			    change_column :users, :name, :text
			    change_column_null :users, :created_at, true
			  end
			end
			
	e). Column Modifiers
	
	-> Column modifiers can be applied when creating or changing a column:

	*). comment   :- Adds a comment for the column.
	*). collation :- Specifies the collation for a string or text column.
	*). default   :- Allows to set a default value on the column. Note that if you are using a dynamic value (such as a date), the default will only be calculated the first time (i.e. on the date the migration is applied). Use nil for NULL.
	
	*). limit     :- Sets the maximum number of characters for a string column and the maximum number of bytes for text/binary/integer columns.
	*). null      :- Allows or disallows NULL values in the column.
	*). precision :- Specifies the precision for decimal/numeric/datetime/time columns.
	*). scale     :- Specifies the scale for the decimal and numeric columns, representing the number of digits after the decimal point.
	
		:-      class ApplyColumnModifier < ActiveRecord::Migration[7.0]
			  def change
			    add_column :products, :grade, :string, comment: "grade for product"
			    change_column :products, :price, :integer, default: "zero", precision: 10, scale: 2
			    change_column :products, :part_number, :string, limit: 100, null: false
			  end
			end
			
	f). References
	-> The add_reference method allows the creation of an appropriately named column.
	
	:-	class AddReferences < ActiveRecord::Migration[7.0]
		  def change
		    add_reference :users, :role, foreign_key: true           #add_reference also can be used as add_belongs_to
		    add_belongs_to :taggings, :taggable, polymorphic: true
		    remove_reference :products, :user, foreign_key           #remove the reference from the model
		  end
		end
		
		
	g). Foreign Keys
	
	:-	 class ForeignKey < ActiveRecord::Migration[7.0]
		  def change
		    add_foreign_key :products, :categories, column: :id      #adding foreign key
		    remove_foreign_key :products, column: :id		       #removing foreign key
		  end
		end
		
		# let Active Record figure out the column name
		remove_foreign_key :accounts, :branches

		# remove foreign key for a specific column
		remove_foreign_key :accounts, column: :owner_id
		
	h). When Helpers aren't Enough
	-> Sometimes the helpers provided by Active Record might not be enough to perform certain database operations, 
	-> such as complex joins, subqueries, or custom SQL queries. 
	-> In such cases, we can use the execute method to execute arbitrary SQL statements directly on the database.
	
		:-      class Helper < ActiveRecord::Migration[7.0]
			  def change
			    Product.connection.execute("UPDATE products SET price = 1 WHERE 1=1")    #making connection with product model
			  end										#and execute inner query directly.
			end
			
			
	i). Using the change Method
	
		:-	class ChangeMethods < ActiveRecord::Migration[7.0]
			  def change
			    change_column_comment :products, :grade, from: "grade for product", to: "providing grade for product"
			    change_column_default :products, :price, from: 1, to: 9 
			    change_column_null :products, :p_name, false
			    create_table :manager do |t|
			      t.string :name
			      t.string :email
			      t.timestamps
			    end
			    disable_extension "pgcrypto"			#desable the pgcrypto extension in PostgreSQL
			    drop_join_table :products, :users
			    enable_extension "pgcrypto"			#enable the pgcrypto extension in PostgreSQL
			    remove_column :products, :p_name, :string
			    remove_index :categorization, name: "index_categorization_on_category_id"
			    remove_timestamps :products
			  end
			  
	NOTE :-   rename_index :users, :index_users_on_email, :index_users_on_email_address
		  rename_table :old_table_name, :new_table_name
end

	j). Using reversible
	-> Complex migrations may require processing that Active Record doesn't know how to reverse.
	-> use reversible to specify what to do when running a migration and what else to do when reverting it.
	-> Using reversible will ensure that the instructions are executed in the right order too.
	
		:-     class UsingReversible < ActiveRecord::Migration[7.0]
			  def change
			    create_table :distributors do |t|
			      t.string :zipcode
			    end

			    reversible do |dir|
			      dir.up do
				#adding zipchk constraint
				execute <<-PSQL                   #execute is used to implement raw sql query directly to database
				  ALTER TABLE distributors        
				  ADD CONSTRAINT zipchk           
				  CHECK (length(zipcode) = 5);
				PSQL
			      end

			      dir.down do
				#removing zipchk constraint
				execute <<-PSQL                 #PSQL is used to take multiline string.
				ALTER TABLE distributors
				DROP CONSTRAINT zipchk
				PSQL
			      end
			    end

			    add_column :users, :home_page_url, :string
			    rename_column :users, :name, :u_name
			  end
			end
			
	NOTE :- Sometimes your migration will do something which is just plain irreversible; 
		for example, it might destroy some data. 
		In such cases, you can raise ActiveRecord::IrreversibleMigration in your down block. 
		If someone tries to revert your migration, an error message will be displayed saying that it can't be done.
		
	k). Using the up/down Methods
	
	-> You can also use the old style of migration using up and down methods instead of the change method. 
	-> The up method should describe the transformation you'd like to make to your schema, and 
	-> the down method of your migration should revert the transformations done by the up method. 
	-> In other words, the database schema should be unchanged if you do an up followed by a down.  
	   For example, if you create a table in the up method, you should drop it in the down method. 
	   It is wise to perform the transformations in precisely the reverse order they were made in the up method.
	   
		   eg:- class UsingReversible < ActiveRecord::Migration[7.0]
			  def up
			    create_table :distributors do |t|
			      t.string :zipcode
			    end

			    #adding zipchk constraint
			    execute <<-PSQL                   #execute is used to implement raw sql query directly to database
			      ALTER TABLE distributors        
			      ADD CONSTRAINT zipchk           
			      CHECK (length(zipcode) = 5);
			    PSQL
			  
			    add_column :users, :home_page_url, :string
			    rename_column :users, :name, :u_name
			  end
		    
		    	#if we rollback the db:migration then down method will work.
			  def down
			    rename_column :users, :u_name, :name
			    remove_column :users, :home_page_url, :string
			    
			    #removing zipchk constraint
			    execute <<-PSQL                 #PSQL is used to take multiline string.
			    ALTER TABLE distributors
			    DROP CONSTRAINT zipchk
			    PSQL
			    
			    drop_table :distributors
			  end
			end
			    
	l). Reverting Previous Migrations
	-> use Active Record's ability to rollback migrations using the revert method.
	-> reverting can be used to reverse any migration. (means it work not only for last migration, even work for all previous migration".
	
		:-     require_relative "20230324045406_using_reversible"    #require migration which you want to revert.

			class RevertMigration < ActiveRecord::Migration[7.0]
			  def change
			    revert UsingReversible      #reverting the previous migration.

			    create_table(:apples) do |t|    #and apple table will created.
			      t.string :variety
			    end
			  end
			end 
			
 3). Running Migrations
 -> running the db:migrate command also invokes the db:schema:dump command, 
 -> which will update your db/schema.rb file to match the structure of your database.
 
 -> If you specify a target version, Active Record will run the required migrations (change, up, down) until 
    it has reached the specified version. The version is the numerical prefix on the migration's filename.
    
    	:- rails db:migrate VERSION=20230324045406
    	
 NOTE :- If version is greater than the current version (i.e., it is migrating upwards), this will run the change (or up) method on all migrations up to and including the version, and will not execute any later migrations. 
 -> If migrating downwards, this will run the down method on all the migrations down to, but not including the version we specified.
 
	a). Rolling back:-
		:- rails db:rollback      		#rollback the last migration.
		:- rails db:rollback STEP=3		#undo the last 3 migration.
		:- bin/rails db:migrate:redo STEP=3   #The db:migrate:redo command is a shortcut for doing a rollback 
							 and then run migrating again
		
	b). Setup the Database:-
		:- rails db:setup      #this will create the database, load the schema, and initialize it with the seed data.
		
	c). Resetting the Database:-
		:- rails db:reset 	#drop the database and set it up again. This is functionally equivalent to rails db:drop db:setup.

 	d). Running Specific Migrations:-
	-> The db:migrate:up and db:migrate:down commands will do that. 
		:- rails db:migrate:up VERSION=20230324045406      #up specify the method you want to run.
		
	NOTE:- This command will first check whether the migration is already performed and will do nothing if Active Record believes that it has already been run.
	
	e). Running Migrations in Different Environments:-
	-> By default running rails db:migrate will run in the development environment. 
	-> To run migrations against another environment you can specify it using the RAILS_ENV environment variable 
	-> while running the command. 
	-> For example to run migrations against the test environment you could run:

		:- rails db:migrate RAILS_ENV=test      #migrate run in test environment
		
	f). Changing the Output of Running Migrations:-

	-> Several methods are provided in migrations that allow you to control all this:

		Method			Purpose
		
		suppress_messages	Takes a block as an argument and suppresses any output generated by the block.
		
		say			Takes a message argument and outputs it as is. 
					A second boolean argument can be passed to specify whether to indent or not.
					
		say_with_time		Outputs text along with how long it took to run its block. 
					If the block returns an integer it assumes it is the number of rows affected.
					
		:-     class ChangeMessageOfMigration < ActiveRecord::Migration[7.0]
			  def change
			    suppress_messages do                   #suppress the table creation msg
			      create_table :productdetails do |t|
				t.string :name
				t.text :details
				t.timestamps
			      end
			    end

			    say "Created a table"      #and show this message

			    suppress_messages {add_index :productdetails, :name}      #suppress the index creation msg
			    say "and an index!", true					#and show this message

			    say_with_time 'Waiting for a while' do
			      sleep 10                 #here process wait for 10 seconds and after 10 second execute forward.
			      10
			    end
			  end
			end
			
		NOTE :- If you want Active Record to not output anything, 
			:- rails db:migrate VERBOSE=false 	#suppress all output.

-----------------------------------------------------------------------------------------------------------------------------------			
 4). Schema Dumps
 -> Schema files are also useful if you want a quick look at what attributes an Active Record object has.
 
 	:-      class SchemaDump < ActiveRecord::Migration[7.0]
		  create_table "manager", force: true do |t|
		      t.string   "name"
		      t.datetime "created_at"
		      t.datetime "updated_at"
		  end
		end
		
	NOTE :- force: true , means if table already exist in database then drop the table and recreate the table with above attribute.
	
------------------------------------------------------------------------------------------------------------------------------------	
 5). Change primary key name:-

	a). using execute command:- 
	
	    *)	class ChangePrimaryKeyNameInTable < ActiveRecord::Migration[7.0]
		  def change
		    rename_column :table_name, :old_primary_key_name, :new_primary_key_name
		    execute "ALTER TABLE table_name ADD PRIMARY KEY (new_primary_key_name);"
		  end
		end
		
	    *)  
	    	You could execute arbitrary SQL in your migration:
		:- execute "ALTER TABLE `products` DROP PRIMARY KEY"
		
		and then add the new column:
		:- add_column :products, :id, :primary_key
		
	b). While creating table :-
	
		class CreateCountries < ActiveRecord::Migration[7.0]
		  def change
		    create_table :countries, id: false, primary_key: :code do |t|
		      t.string :code, null: false
		      t.text :description

		      # ...

		      t.timestamps

		     # You probably would want `code` to be unique. In that case...
		      t.index :code, unique: true
		    end
		  end
		end
		
		-> In addition, we need to specify the Primary Key in the model.

			class Country < ApplicationRecord
			  self.primary_key = :code
			end
			
	c). using add and remove command:-
	
		class ChangePrimaryKey < ActiveRecord::Migration[7.0]
		  def change
		    remove_column :seller, :seller_id
		    add_column :seller, :s_id, :primary_key
		  end
		end
		
-------------------------------------------------------------------------------------------------------------------------------------
								seed.rb use
								
-> can be use to provide initial data into the table.

a). without seed using:-

	:-     class UsingSeed < ActiveRecord::Migration[7.0]
		  def up
		    5.times do |i|
		      Role.create(name: "Product ##{i}")
		    end
		  end

		  def down
		    Role.delete_all
		  end
		end
		
b). using seed.rb:-

	:-     10.times do |i|
		  Role.create(name: "Product ##{i}")
		end
